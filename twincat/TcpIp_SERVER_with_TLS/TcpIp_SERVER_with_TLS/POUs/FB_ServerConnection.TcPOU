<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_ServerConnection" Id="{9a938bd0-a6e6-42ff-8c55-c498bff2653c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ServerConnection
VAR_IN_OUT
	fbLog          : FB_LogFifo;(* Log message fifo *)
	hListener      : T_HSOCKET;(* Listener socket handle *)
	bReset         : BOOL;
END_VAR
VAR_INPUT
	sSrvNetID      : T_AmsNetID :='';(* TwinCAT TCP/IP server network address *)
	bEnable        : BOOL       :=FALSE;(* TRUE => connect and exchange data, FALSE => disconnect *)
	tReconnect     : TIME       :=T#1S;(* Accept new connection (reconnect) after this time *)
	bLog           : BOOL       :=FALSE;(* TRUE => Enable log message output, FALSE => Disable *)
	sPrefix        : STRING     :='SERVERx::';(* Log message description string (allows the identification of log message source) *)
END_VAR
VAR_OUTPUT
	bAccepted      : BOOL       :=FALSE;(* Accepted connection status *)
END_VAR
VAR
	fbAccept       : FB_SocketAccept;
	fbClose        : FB_SocketClose;
	fbReceive      : FB_SocketReceive;
	fbSend         : FB_SocketSend;
	eStep          : E_ConnectionSteps;
	bRcvBusy       : BOOL;
	bSndBusy       : BOOL;
	bDisconnect    : BOOL;

	fbAcceptTimer  : TON;(* Accept poll timer *)
	fbRequestTimer : TON;(* Request timeout timer *)
	
	rxBuffer       : U_data;
	txBuffer       : U_data;
	sTxFrame       : T_MaxString;
	sRxFrame       : T_MaxString;
	cbReceived     : UDINT;
	nLenOfString   : UDINT;(* String length inclusive the null delimiter *)
	bEndOfString   : BOOL:=FALSE;
	
	ReceiveCounter: INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE eStep OF
	eCONNECTION_STATE_IDLE:
		IF bEnable XOR bAccepted THEN
			IF bEnable THEN
				fbAcceptTimer( IN := TRUE );
				IF fbAcceptTimer.Q THEN
					
					fbLog.Clear( sPrefix := sPrefix, bLog := bLog );(* Clear log fifo *)
				
					bRcvBusy := FALSE;
					bDisconnect := FALSE;
					cbReceived := 0;
					
					fbRequestTimer( IN := FALSE, PT := PLCPRJ_RECEIVE_TIMEOUT );
					fbAcceptTimer( IN := FALSE, PT := tReconnect );
					
					
					eStep := eCONNECTION_STATE_CONNECT_START;
				END_IF
			ELSE
				eStep := eCONNECTION_STATE_CLOSE_START;
			END_IF
		ELSIF bAccepted THEN
			eStep := eCONNECTION_STATE_DATAEXCHANGE;
		ELSE
			fbAcceptTimer( IN := FALSE, PT := T#0S );
		END_IF

	eCONNECTION_STATE_CONNECT_START:
		fbAccept(bExecute:=FALSE);
		fbAccept(sSrvNetID:=sSrvNetID,
				hListener:=hListener,
				bExecute:=TRUE);
		eStep := eCONNECTION_STATE_CONNECT_WAIT;

	eCONNECTION_STATE_CONNECT_WAIT:
		fbAccept(bExecute:=FALSE);
		IF NOT fbAccept.bBusy THEN
			IF NOT fbAccept.bError THEN
				IF fbAccept.bAccepted THEN
					bAccepted := TRUE;
					fbLog.Message( sMessage := 'Connection accepted!', hSocket := fbAccept.hSocket );
				END_IF
				eStep := eCONNECTION_STATE_IDLE;
			ELSE
				fbLog.Error( sMessage := 'FB_SocketAccept()', nErrId := fbAccept.nErrId );
				eStep := eCONNECTION_STATE_ERROR;
			END_IF
		END_IF

	eCONNECTION_STATE_DATAEXCHANGE:(* Data exchange state *)
		bDisconnect := NOT bEnable OR bDisconnect;(* User/internal disconnect requested? *)
		
	(*
	--------------Simpilfied Part - Send/Receive String
	*)
	
	IF bDisconnect AND NOT bRcvBusy THEN
			bDisconnect := FALSE;
			eStep := eCONNECTION_STATE_CLOSE_START;(* Disconnect *)
	ELSE
	
		fbReceive(sSrvNetID:=sSrvNetID,
			hSocket:=fbAccept.hSocket,
			pDest:=ADR(rxBuffer) ,
			cbLen:=SIZEOF(rxBuffer),
			bExecute:=TRUE);
			bRcvBusy := TRUE;
					
		IF NOT fbReceive.bBusy THEN
			fbReceive(bExecute := FALSE);
			IF fbReceive.nRecBytes <> 0 THEN
				ReceiveCounter := ReceiveCounter + 1; 
			END_IF
	
					
		txBuffer.sText := 'ChecCheck';
	
			fbSend(sSrvNetID:=sSrvNetID,
				hSocket:=fbAccept.hSocket,
				pSrc:=ADR(txBuffer),
				cbLen:=SIZEOF(txBuffer),
				bExecute:=TRUE);
				bSndBusy := TRUE;
	
		END_IF
			
	END_IF
		
	(*
		--------------Simpilfied Part - Send/Receive String
	*)
	
	eCONNECTION_STATE_CLOSE_START:
		fbLog.Message( sMessage := 'Closing connection!', hSocket := fbAccept.hSocket );
		fbClose(bExecute:=FALSE);
		fbClose(sSrvNetID:=sSrvNetID, hSocket:=fbAccept.hSocket, bExecute:=TRUE);
		eStep := eCONNECTION_STATE_CLOSE_WAIT;

	eCONNECTION_STATE_CLOSE_WAIT:
		fbClose(bExecute:=FALSE);
		IF NOT fbClose.bBusy THEN
			bAccepted := FALSE;
			IF NOT fbClose.bError THEN
				eStep := eCONNECTION_STATE_IDLE;
			ELSE
				fbLog.Error( sMessage := 'FB_SocketClose(accepted)', nErrId := fbClose.nErrId );
				eStep := eCONNECTION_STATE_ERROR;
			END_IF
		END_IF

	eCONNECTION_STATE_ERROR:
		IF bAccepted THEN
			eStep := eCONNECTION_STATE_CLOSE_START;
		ELSE
			eStep := eCONNECTION_STATE_IDLE;
		END_IF

END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="FB_ServerConnection">
      <LineId Id="3" Count="6" />
      <LineId Id="12" Count="5" />
      <LineId Id="19" Count="39" />
      <LineId Id="300" Count="1" />
      <LineId Id="299" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="59" Count="2" />
      <LineId Id="86" Count="0" />
      <LineId Id="93" Count="5" />
      <LineId Id="232" Count="0" />
      <LineId Id="238" Count="2" />
      <LineId Id="242" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="235" Count="1" />
      <LineId Id="290" Count="0" />
      <LineId Id="293" Count="0" />
      <LineId Id="286" Count="3" />
      <LineId Id="283" Count="2" />
      <LineId Id="237" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="296" Count="1" />
      <LineId Id="159" Count="1" />
      <LineId Id="162" Count="25" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>